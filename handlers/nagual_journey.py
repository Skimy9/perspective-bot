# handlers/nagual_journey.py
# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ...
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from utils.nagual_journey import (
    get_journey_state, can_continue_journey, process_answer, STAGES
)
from keyboards.tests_menu import _add_main_menu_button
from database import SessionLocal
import datetime
import os
from utils.analytics import log_event

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMAGE_PATH = os.path.join("assets", "images", "path_to_hidden")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if not os.path.exists(IMAGE_PATH):
    logger.warning(f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {IMAGE_PATH}")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    IMAGE_PATH = os.path.join(os.getcwd(), "assets", "images", "path_to_hidden")
    if not os.path.exists(IMAGE_PATH):
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {IMAGE_PATH}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
STATE_JOURNEY_STARTED = "nagual:started"
STATE_JOURNEY_STAGE = "nagual:stage_"
STATE_JOURNEY_COMPLETED = "nagual:completed"

async def start_nagual_journey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—É—Ç–∏ –∫ –°–∫—Ä—ã—Ç–æ–º—É"""
    keyboard = [
        [InlineKeyboardButton("–î–∞, —è –ø—Ä–∏–Ω–∏–º–∞—é –≤—ã–∑–æ–≤", callback_data="nagual:start")],
        [InlineKeyboardButton("–ù–µ—Ç, —è –Ω–µ –≥–æ—Ç–æ–≤", callback_data="to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    intro = (
        "üåå <b>–≠–¢–û –ù–ï –ò–ì–†–ê</b>\n\n"
        "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ. –ö—Ç–æ-—Ç–æ ‚Äî –∏–ª–∏ —á—Ç–æ-—Ç–æ ‚Äî –≤—ã–±—Ä–∞–ª–æ –≤–∞—Å.\n\n"
        "<b>–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∑–Ω–∞–π—Ç–µ:</b>\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –º–∏—Ä –∫–∞–∫ —Ä–∞–Ω—å—à–µ\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–±—Ä–æ—Å–∏—Ç –≤–∞—Å –∫ –Ω–∞—á–∞–ª—É –ø—É—Ç–∏\n"
        "‚Ä¢ –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ \"–ù–∞–∑–∞–¥\" ‚Äî —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–µ–±—ã—Ç–∏–µ\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç–µ—Ä—è—Ç—å —Å–µ–±—è ‚Äî –∑–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n\n"
        "–í—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–º–µ—á–∞–ª–∏, –∫–∞–∫ <i>–¥—Ä–æ–∂–∏—Ç</i> —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –≤ –ø–æ–ª–¥–µ–Ω—å? –ö–∞–∫ –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è <i>–ª–∏–ø–∫–∏–º</i>? –≠—Ç–æ ‚Äî —Ç—Ä–µ—â–∏–Ω—ã. –ò—Ö –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ.\n\n"
        "–ß—Ç–æ-—Ç–æ –∂–¥–µ—Ç –≤–∞—Å <b>—Å—Ä–µ–¥–∏ —Ç—Ä–µ—â–∏–Ω</b>. –û–Ω–æ –Ω–µ –ø—Ä–∏–¥–µ—Ç –∫ –≤–∞–º. –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –µ–≥–æ.\n\n"
        "<b>–í–ê–ñ–ù–û:</b> –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∞—Ç 5 –¥–µ–π—Å—Ç–≤–∏–π. –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –∏—Å—Ç–∏–Ω–Ω–æ. –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –ª–æ–≤—É—à–∫–∏ –≤–∞—à–µ–≥–æ —Ä–∞–∑—É–º–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º—É–¥—Ä–æ.\n\n"
        "<b>–í—ã –≥–æ—Ç–æ–≤—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ –∑–∞ –∑–∞–≤–µ—Å–æ–π?</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ caption
    try:
        image_path = os.path.join(IMAGE_PATH, "intro.png")
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo,
                    caption=intro,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            # –ó–∞–ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
            log_event(
                update.effective_user.id, 
                update.effective_user.username or "unknown", 
                "path_started"
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            await update.callback_query.edit_message_text(
                text=intro,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            # –ó–∞–ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
            log_event(
                update.effective_user.id, 
                update.effective_user.username or "unknown", 
                "path_started"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ intro.png: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ caption
            await update.callback_query.edit_message_caption(
                caption=intro,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            # –ó–∞–ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
            log_event(
                update.effective_user.id, 
                update.effective_user.username or "unknown", 
                "path_started"
            )
        except Exception as caption_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è caption: {caption_error}")
            try:
                # –ï—Å–ª–∏ caption —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                await update.callback_query.edit_message_text(
                    text=intro,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                # –ó–∞–ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
                log_event(
                    update.effective_user.id, 
                    update.effective_user.username or "unknown", 
                    "path_started"
                )
            except Exception as text_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {text_error}")
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=intro,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                # –ó–∞–ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
                log_event(
                    update.effective_user.id, 
                    update.effective_user.username or "unknown", 
                    "path_started"
                )


async def handle_nagual_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø—É—Ç–∏ –∫ –°–∫—Ä—ã—Ç–æ–º—É"""
    query = update.callback_query
    await query.answer()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
    parts = query.data.split(":")
    
    if query.data == "nagual:start":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—É—Ç—å
        context.user_data['nagual_state'] = {
            'current_stage': 0,
            'journey_started': True,
            'completed': False,
            'stage_started': datetime.datetime.now().isoformat()
        }
        await show_stage(update, context, 0)
    
    elif len(parts) >= 4 and parts[0] == "nagual" and parts[1] == "stage":
        stage = int(parts[2])
        answer = int(parts[3])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        with SessionLocal() as session:
            result = process_answer(update.effective_user.id, stage, answer, session)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'nagual_state' not in context.user_data:
            context.user_data['nagual_state'] = {}
            
        context.user_data['nagual_state']['current_stage'] = result['next_stage']
        context.user_data['nagual_state']['completed'] = result['completed']
        
        if result['is_correct']:
            if result['completed']:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É—Ç–∏
                completion_message = (
                    "üåå <b>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!</b>\n\n"
                    "–í—ã –ø—Ä–æ—à–ª–∏ –ø—É—Ç—å. –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –º–∏—Ä –∫–∞–∫ —Ä–∞–Ω—å—à–µ. –≠—Ç–æ –Ω–µ –∏–≥—Ä–∞. –≠—Ç–æ –Ω–æ–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ.\n\n"
                    "<b>–í–∞—à–∏ –≥–ª–∞–∑–∞ —Ç–µ–ø–µ—Ä—å –≤–∏–¥—è—Ç —Ç—Ä–µ—â–∏–Ω—ã. –í–∞—à–µ —Å–µ—Ä–¥—Ü–µ —á—É–≤—Å—Ç–≤—É–µ—Ç –≤–∏–±—Ä–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í—ã ‚Äî –Ω–µ —Ç–æ—Ç, –∫–µ–º –±—ã–ª–∏ –≤—á–µ—Ä–∞.</b>\n\n"
                    "–≠—Ç–æ—Ç –ø—É—Ç—å –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ü–∞. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ—â–∏–Ω—ã. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å: –≤–æ–π—Ç–∏ –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ä–æ–º –º–∏—Ä–µ.\n\n"
                    "–ù–æ –ø–æ–º–Ω–∏—Ç–µ: <i>\"–¢–æ—Ç, –∫—Ç–æ –≤–∏–¥–∏—Ç —Ç—Ä–µ—â–∏–Ω—ã, —Å–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç—Ä–µ—â–∏–Ω–æ–π –≤ –∏–ª–ª—é–∑–∏–∏.\"</i>\n\n"
                    "<b>–í—ã –ø—Ä–æ—à–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –≤—ã ‚Äî —á–∞—Å—Ç—å –ø—É—Ç–∏.</b>"
                )
                
                # –£–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º" –∏ "–ù–∞–ø–æ–º–Ω–∏—Ç—å"
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="nagual:start")]
                ]
                reply_markup = InlineKeyboardMarkup(_add_main_menu_button(keyboard))
                
                try:
                    image_path = os.path.join(IMAGE_PATH, "final.png")
                    if os.path.exists(image_path):
                        with open(image_path, 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id,
                                photo=photo,
                                caption=completion_message,
                                reply_markup=reply_markup,
                                parse_mode="HTML"
                            )
                    else:
                        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                        await query.edit_message_caption(
                            caption=completion_message,
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ final.png: {e}")
                    await query.edit_message_caption(
                        caption=completion_message,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
                await show_stage(update, context, result['next_stage'])
        else:
            # ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
            # –î–û–ë–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê "–ü–†–û–ô–¢–ò –ó–ê–ù–û–í–û"
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="nagual:start")],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_caption(
                caption=result['message'],
                reply_markup=reply_markup,
                parse_mode="HTML"
            )


async def show_stage(update: Update, context: ContextTypes.DEFAULT_TYPE, stage_num: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø—É—Ç–∏"""
    if stage_num >= len(STAGES):
        return
    
    stage = STAGES[stage_num]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç—Ç–∞–ø–∞
    text = f"üåå <b>{stage['title']}</b>\n\n{stage['description']}\n\n<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    buttons = []
    for i, option in enumerate(stage['options']):
        buttons.append([InlineKeyboardButton(f"{i+1}. {option}", 
                                           callback_data=f"nagual:stage:{stage_num}:{i}")])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞
    if 'nagual_state' not in context.user_data:
        context.user_data['nagual_state'] = {}
    context.user_data['nagual_state']['stage_started'] = datetime.datetime.now().isoformat()
    
    reply_markup = InlineKeyboardMarkup(_add_main_menu_button(buttons))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ caption
    try:
        image_path = os.path.join(IMAGE_PATH, f"{stage_num + 1}.png")
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ {stage_num + 1}: {e}")
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–∞–ø–∞
    log_event(
        update.effective_user.id, 
        update.effective_user.username or "unknown", 
        "path_stage_viewed", 
        f"stage_{stage_num + 1}"
    )
