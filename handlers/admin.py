# admin.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import settings
from database import SessionLocal
from database.models import Question, User, Statistic
from sqlalchemy.orm import joinedload
import logging
from sqlalchemy import func
from datetime import datetime, timedelta


logger = logging.getLogger(__name__)


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != settings.ADMIN_ID:
        return

    query = update.callback_query
    if query:
        await query.answer()

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç—ã
    seven_days_ago = datetime.now() - timedelta(days=7)

    with SessionLocal() as session:
        total_users = session.query(User).count()
        
        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
        active_users = session.query(User).filter(
            User.last_seen > seven_days_ago
        ).count()

        # –¢–æ–ø —Ç–µ—Å—Ç–æ–≤
        top_tests = session.query(
            Statistic.test_id,
            func.count(Statistic.id)
        ).filter(
            Statistic.event_type == "test_started"
        ).group_by(
            Statistic.test_id
        ).order_by(
            func.count(Statistic.id).desc()
        ).limit(5).all()

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ "–ü—É—Ç–∏ –∫ –°–∫—Ä—ã—Ç–æ–º—É"
        path_started = session.query(func.count(Statistic.id)).filter(
            Statistic.event_type == "path_started"
        ).scalar()

        path_completed = session.query(func.count(Statistic.id)).filter(
            Statistic.event_type == "path_completed"
        ).scalar()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_names = {
        "big_five": "Big Five",
        "depression": "–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é",
        "path_to_hidden": "–ü—É—Ç—å –∫ –°–∫—Ä—ã—Ç–æ–º—É"
    }

    top_tests_text = "\n".join([
        f"  {i+1}. {test_names.get(t[0], t[0])} ‚Äî {t[1]} –∑–∞–ø—É—Å–∫–æ–≤"
        for i, t in enumerate(top_tests)
    ]) or "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ 7 –¥–Ω–µ–π):</b> {active_users}\n\n"
        f"üåÄ <b>–ü—É—Ç—å –∫ –°–∫—Ä—ã—Ç–æ–º—É:</b>\n"
        f"  –ó–∞–ø—É—â–µ–Ω–æ: {path_started}\n"
        f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {path_completed}\n\n"
        f"üéØ <b>–¢–û–ü —Ç–µ—Å—Ç–æ–≤:</b>\n{top_tests_text}"
    )

    # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query and query.message:
        await query.edit_message_text(
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )


async def admin_show_unanswered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()

    try:
        with SessionLocal() as session:
            unanswered = (
                session.query(Question)
                .options(joinedload(Question.user))
                .filter(Question.answered == 0)
                .order_by(Question.timestamp.asc())
                .all()
            )

        if not unanswered:
            keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            return

        lines = []
        for q in unanswered:
            user_obj: User = q.user
            if user_obj:
                user_name = f"@{user_obj.username}" if user_obj.username else user_obj.first_name or f"ID {user_obj.telegram_id}"
            else:
                user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            lines.append(
                f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ #{q.id}</b>\n"
                f"üë§ –û—Ç: {user_name}\n"
                f"üí¨ {q.text[:100]}{'...' if len(q.text) > 100 else ''}\n"
                f"üïí {q.timestamp.strftime('%H:%M %d.%m')}\n"
                f"üîπ /reply_{q.id} ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å"
            )

        text = "\n\n".join(lines)
        keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", exc_info=True)
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]])
        )


async def handle_admin_reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reply_X ‚Äî –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    if user.id != settings.ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return

    message = update.message.text.strip()
    if not message.startswith("/reply_"):
        return

    try:
        question_id = int(message.split("_", 1)[1])  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        context.user_data["admin_waiting_reply"] = question_id

        logger.info(f"–ê–¥–º–∏–Ω {user.id} –Ω–∞—á–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ #{question_id}")

        await update.message.reply_text(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>#{question_id}</b>. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            parse_mode="HTML"
        )
    except (IndexError, ValueError) as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /reply_: {message}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /reply_123")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /reply_: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")