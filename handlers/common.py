from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  # ‚úÖ –í—Å–µ –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from telegram.ext import ContextTypes
from config.settings import settings
from keyboards.tests_menu import get_main_inline_keyboard, get_feedback_keyboard, _add_main_menu_button  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
from database import SessionLocal
from database.models import Question  # ‚Üê –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!
from sqlalchemy.orm import joinedload
from handlers import feedback  # ‚Üê –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å feedback

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    print(f"üîπ –í–∞—à Telegram ID: {user.id}")
    print(f"üîπ ADMIN_ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {settings.ADMIN_ID}")
    print(f"üîπ –¢–∏–ø ADMIN_ID: {type(settings.ADMIN_ID)}")
    print(f"üîπ –í—ã –∞–¥–º–∏–Ω? {user.id == settings.ADMIN_ID}")

    is_admin = user.id == settings.ADMIN_ID
    reply_markup = get_main_inline_keyboard(is_admin=is_admin)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user.id == settings.ADMIN_ID and context.user_data.get("admin_waiting_reply"):
        question_id = context.user_data.pop("admin_waiting_reply")

        with SessionLocal() as session:
            question = session.query(Question).options(joinedload(Question.user)).get(question_id)
            if not question:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –î–û –±–ª–æ–∫–∞ try/except
            keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=question.user.telegram_id,
                    text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞:\n\n{text}"
                )
                question.answer = text
                question.answered = 1
                session.commit()

                await update.message.reply_text(
                    "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    reply_markup=reply_markup
                )
            except Exception as e:
                session.rollback()
                # –¢–µ–ø–µ—Ä—å reply_markup —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}",
                    reply_markup=reply_markup
                )
                return

            # üîÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            with SessionLocal() as session:
                unanswered = (
                    session.query(Question)
                    .options(joinedload(Question.user))
                    .filter(Question.answered == 0)
                    .all()
                )

            if not unanswered:
                # ‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "üì≠ –ë–æ–ª—å—à–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.",
                    reply_markup=reply_markup
                )
            else:
                # üì• –ï—Å—Ç—å –µ—â—ë –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                lines = []
                for q in unanswered:
                    user_obj = q.user
                    user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    if user_obj:
                        user_name = f"@{user_obj.username}" if user_obj.username else user_obj.first_name or f"ID {user_obj.telegram_id}"

                    lines.append(
                        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ #{q.id}</b>\n"
                        f"üë§ –û—Ç: {user_name}\n"
                        f"üí¨ {q.text}\n"
                        f"üïí {q.timestamp.strftime('%H:%M %d.%m')}\n"
                        f"üîπ /reply_{q.id} ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å"
                    )

                text = "\n\n".join(lines)
                reply_markup = InlineKeyboardMarkup(_add_main_menu_button([]))  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É
                await update.message.reply_text(text=text, parse_mode="HTML", disable_web_page_preview=True)
        return

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    await feedback.handle_feedback_message(update, context)

async def handle_author_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É'"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    reply_markup = get_feedback_keyboard()
    await query.edit_message_text(
        text="üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É. –Ø –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—é –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å! –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ç–µ—Å—Ç—ã. " \
        "–ß–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–ª–∏ —á—Ç–æ –ª–∏—à–Ω–µ–µ. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö.",
        reply_markup=reply_markup
    )