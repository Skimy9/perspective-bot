# handlers/tests.py
import logging
import time
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.error import BadRequest, TimedOut, RetryAfter
from tests.test_factory import TestFactory
from keyboards.tests_menu import (
    _add_main_menu_button,
    get_main_inline_keyboard,
    get_categories_keyboard,
    get_tests_keyboard,
    get_question_keyboard
)
from utils.analytics import log_event  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –§–ª–∞–≥: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
DEBUG_LOGS = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –í–°–ï –ª–æ–≥–∏

def debug_log(message):
    """–£—Å–ª–æ–≤–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DEBUG_LOGS = True"""
    if DEBUG_LOGS:
        logger.debug(message)


async def safe_edit_message(update: Update, text: str, reply_markup=None, max_retries=3):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞
    """
    for attempt in range(max_retries):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
            if update.callback_query.message.photo:
                await update.callback_query.edit_message_caption(
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            return True
        except TimedOut:
            if attempt == max_retries - 1:
                raise
            await asyncio.sleep(1)
        except RetryAfter as e:
            await asyncio.sleep(e.retry_after)
        except BadRequest as e:
            if "Message is not modified" in str(e):
                logger.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                return True
            logger.error(f"BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    return False


async def handle_main_menu_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    if query.data == "show_categories":
        await show_categories_menu(update)
    elif query.data == "to_main":
        await show_main_menu(update)


async def show_main_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        if update.callback_query.message.photo:
            await update.callback_query.edit_message_caption(
                caption="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_inline_keyboard()
            )
        else:
            await update.callback_query.edit_message_text(
                text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_inline_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inline_keyboard()
        )


async def show_categories_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        await update.callback_query.edit_message_caption(
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤:",
            reply_markup=get_categories_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        try:
            await update.callback_query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤:",
                reply_markup=get_categories_keyboard(),
                parse_mode='HTML'
            )
        except:
            await update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤:",
                reply_markup=get_categories_keyboard(),
                parse_mode='HTML'
            )


async def show_tests_menu(update: Update, category_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await update.callback_query.edit_message_caption(
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
            reply_markup=get_tests_keyboard(category_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        try:
            await update.callback_query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
                reply_markup=get_tests_keyboard(category_id),
                parse_mode='HTML'
            )
        except:
            await update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
                reply_markup=get_tests_keyboard(category_id),
                parse_mode='HTML'
            )

async def handle_category_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü—É—Ç–∏ –∫ –°–∫—Ä—ã—Ç–æ–º—É
    reset_nagual_state(context)
    
    category_id = query.data.split('_', 1)[1]
    await show_tests_menu(update, category_id)


async def handle_test_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü—É—Ç–∏ –∫ –°–∫—Ä—ã—Ç–æ–º—É
    reset_nagual_state(context)
    
    if not query.data.startswith("test_"):
        return

    test_id = query.data.split("_", 1)[1]

    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ DEBUG_LOGS = True
    debug_log(f"üöÄ handle_test_action: –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ {test_id}")

    test = TestFactory.get_test(test_id)
    if not test:
        logger.warning(f"‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_id}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not hasattr(test, 'questions') or not hasattr(test, 'options'):
        logger.error(f"‚ùå –¢–µ—Å—Ç {test_id} –ø–æ–≤—Ä–µ–∂–¥—ë–Ω: –Ω–µ—Ç questions –∏–ª–∏ options")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    log_event(user_id, username, "test_started", test_id)

    context.user_data['current_test'] = {
        'id': test_id,
        'answers': []
    }

    try:
        await show_question(update, context, test, 0)
        debug_log(f"‚úÖ –¢–µ—Å—Ç {test_id} –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ {test_id}: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞.")


async def handle_back_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()

    if query.data == "to_categories":
        await show_categories_menu(update)
    elif query.data == "to_main":
        await show_main_menu(update)


async def show_question(update: Update, context: ContextTypes.DEFAULT_TYPE, test, question_num: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    try:
        if not 0 <= question_num < len(test.questions):
            raise IndexError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: {question_num}")

        if 'current_test' in context.user_data:
            context.user_data['current_test']['current_question'] = question_num

        question_text = (
            f"üìù <b>{test.name}</b>\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å {question_num + 1}/{len(test.questions)}:\n"
            f"{test.questions[question_num]}"
        )

        reply_markup = get_question_keyboard(test, question_num)

        if not await safe_edit_message(update, question_text, reply_markup):
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ {question_num}: {e}", exc_info=True)
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    try:
        await query.answer()
        await asyncio.sleep(0.1)

        parts = query.data.split('_')
        if len(parts) != 3:
            debug_log(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            return

        q_num = int(parts[1])
        a_num = int(parts[2])

        test_data = context.user_data.get('current_test')
        if not test_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã.")
            return

        test = TestFactory.get_test(test_data['id'])
        if not test:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if q_num >= len(test.questions):
            debug_log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: {q_num}")
            return
        if a_num >= len(test.options[q_num]):
            debug_log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {a_num}")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        log_event(user_id, username, "answer_given", f"{test_data['id']}_q{q_num}")

        answers = test_data['answers']
        if len(answers) <= q_num:
            answers.append(a_num)
        else:
            answers[q_num] = a_num

        next_question = q_num + 1
        if next_question < len(test.questions):
            await show_question(update, context, test, next_question)
        else:
            await finish_test(update, context)

    except TimedOut:
        logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await query.answer("‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")


async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    test_data = context.user_data.get('current_test')
    if not test_data:
        logger.warning("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
        if update.callback_query and update.callback_query.message:
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return

    test = TestFactory.get_test(test_data['id'])
    if not test:
        logger.warning(f"‚ùå –¢–µ—Å—Ç {test_data['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    answers = test_data.get('answers', [])
    if len(answers) != len(test.questions):
        logger.warning("‚ùå –ù–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –æ—Ç–≤–µ—á–µ–Ω—ã")
        await update.callback_query.edit_message_text("‚ùå –ù–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –æ—Ç–≤–µ—á–µ–Ω—ã.")
        return

    try:
        result = test.interpret(answers)
        text = f"<b>{result['result']}</b>\n\n{result['advice']}"
        reply_markup = InlineKeyboardMarkup(_add_main_menu_button([]))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        log_event(user_id, username, "test_completed", test_data['id'])
        
        await safe_edit_message(update, text, reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
    finally:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
        if 'current_test' in context.user_data:
            del context.user_data['current_test']

        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

