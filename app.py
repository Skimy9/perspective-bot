# app.py
import os
import logging
from telegram.ext import ApplicationBuilder
from config.settings import settings
from database import init_db
from aiohttp import web
import handlers.nagual_journey as nagual_journey
import handlers.tests as tests
import handlers.admin as admin
import handlers.common as common
import handlers.feedback as feedback
from handlers.admin import admin_show_unanswered, handle_admin_reply_command

# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def setup_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    # 1. –°–∞–º—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ‚Äî –≤ –Ω–∞—á–∞–ª–æ
    app.add_handler(CallbackQueryHandler(tests.handle_answer, pattern="^answer_"))          # answer_0_1
    app.add_handler(CallbackQueryHandler(tests.handle_test_action, pattern="^test_"))       # test_soul_type
    app.add_handler(CallbackQueryHandler(tests.handle_category_action, pattern="^category_"))  # category_esoteric
    app.add_handler(CallbackQueryHandler(tests.handle_main_menu_action, pattern="^(show_categories|to_main)$"))
    app.add_handler(CallbackQueryHandler(common.handle_author_message, pattern="^ask_author$"))
    app.add_handler(CallbackQueryHandler(admin_show_unanswered, pattern="^admin_unanswered$"))
    app.add_handler(CallbackQueryHandler(nagual_journey.start_nagual_journey, pattern="^nagual_intro$"))
    app.add_handler(CallbackQueryHandler(nagual_journey.handle_nagual_action, pattern="^nagual:"))
    app.add_handler(CallbackQueryHandler(admin_show_unanswered, pattern="^admin_unanswered$"))
    app.add_handler(CallbackQueryHandler(admin.show_stats, pattern="^admin_stats$"))
    app.add_handler(CallbackQueryHandler(nagual_journey.start_nagual_journey, pattern="^nagual_intro$"))
    
    # 2. –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", common.start))

    # 3. –°–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(
        filters.COMMAND & filters.User(user_id=settings.ADMIN_ID),
        handle_admin_reply_command
    ))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, common.handle_message))

async def setup_application():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
    global application
    
    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ‚Äî –°–ê–ú–ê–Ø –ü–ï–†–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder() \
        .token(settings.BOT_TOKEN) \
        .connect_timeout(30) \
        .read_timeout(30) \
        .pool_timeout(30) \
        .build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setup_handlers(application)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    
    return application

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        update = await request.json()
        await application.process_update(Update.de_json(update, application.bot))
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    bot_app = await setup_application()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    port = int(os.environ.get('PORT', '10000'))
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
    domain = os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'perspective-bot.onrender.com')
    webhook_url = f"https://{domain}/webhook"
    
    logger.info(f"üåç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞
    await bot_app.bot.delete_webhook(drop_pending_updates=True)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –≤ Telegram
    await bot_app.bot.set_webhook(
        url=webhook_url,
        secret_token=os.environ.get('WEBHOOK_SECRET', 'YOUR_SECRET_TOKEN'),
        allowed_updates=["message", "callback_query"]
    )
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    await bot_app.start()
    
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏")

async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global application
    if application:
        await application.stop()
        await application.shutdown()

def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp"""
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
    app.router.add_post('/webhook', handle_webhook)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—É–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    return app

if __name__ == "__main__":
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã.")
    web.run_app(create_app(), host='0.0.0.0', port=int(os.environ.get('PORT', '10000')))
